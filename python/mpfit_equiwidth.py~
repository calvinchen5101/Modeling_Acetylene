import os
from mpfit import mpfit
import numpy as np
from scipy.interpolate import splrep, splev
#import ss_readfits
import matplotlib.pyplot as plt

#c_data, c_tags = ss_readfits.ss_readfits("conv_c2h2.fits")
#g_data, g_tags = ss_readfits.ss_readfits("inform_c2h2.fits")

#print (1)

low = (5.5, 6.5)
up = (8.5, 10)
#low = (11.5, 12.5)
#up = (16, 20)


for root, dirs, files in os.walk('/asiaa/home/ssp201701/CAGB/VRO'):
    filename = files

#print(2)

def myfunct(p, fjac=None, x=None, y=None, err=None):
	# Parameter values are passed in "p"
	# If FJAC!=None then partial derivatives must be comptuer.
	# FJAC contains an array of len(p), where each entry
	# is 1 if that parameter is free and 0 if it is fixed.
	model = F(x, p)
	# Non-negative status value means MPFIT should continue, negative means
	# stop the calculation.
	status = 0
	return([status, (y-model)/err])

def F(x, p):
    return p[0] * (x**3) + p[1] * (x**2) + p[2] * x + p[3]
#def fun(p, x, y):
    #return model(p, x) - y

i = 0
while i < len(filename):
    #print (3)
    try:
        print (filename[i])
        wlen = np.genfromtxt('/asiaa/home/ssp201701/CAGB/VRO/' + filename[i], usecols=0)
        flux = np.genfromtxt('/asiaa/home/ssp201701/CAGB/VRO/' + filename[i], usecols=1)
        v = np.genfromtxt('/asiaa/home/ssp201701/CAGB/VRO/' + filename[i], usecols=2)

	wlen_low = wlen[wlen >= low[0]]
        wlen_low = wlen_low[wlen_low <= low[1]]
        #print wlen_low

	wlen_up = wlen[wlen >= up[0]]
        wlen_up = wlen_up[wlen_up <= up[1]]
        #print wlen_up
	flux_low = flux[wlen >= low[0]]
        flux_low = flux_low[:len(wlen_low)]

	flux_up = flux[wlen >= up[0]]
        flux_up = flux_up[:len(wlen_up)]

	v_low = v[wlen >= low[0]]
        v_low = v_low[:len(wlen_low)]

	v_up = v[wlen >= up[0]]
        v_up = v_up[:len(wlen_up)]

        x = np.concatenate((wlen_low, wlen_up))
        y = np.concatenate((flux_low, flux_up))
        err = np.concatenate((v_low, v_up))

        start = np.where(wlen == wlen_low[0])
        start = start[0][0]
        stop = np.where(wlen == wlen_up[-1])
        stop = stop[0][0]

        p0 = np.ones(5)
        
        #print ('Enter')
        fa = {'x': x, 'y': y, 'err': err}
        
        m = mpfit(myfunct, p0, functkw = fa)
        
        mflux = F(wlen[start:stop + 1], m.params)
        #norm_flux = flux / mflux
        plt.figure(figsize = (5, 10))
        plt.plot(wlen, flux, 'k-', lw = 3)
        plt.fill_between(wlen, flux-v, flux+v, facecolor = 'grey', alpha = 0.5, edgecolor = 'grey')
        plt.plot(wlen[start:stop + 1], mflux, 'r-', lw = 3)
        plt.axis([5,15,None,None])
        plt.grid(True)
        plt.savefig('/arrays/igloo1/ssp201701/CAGB/VRO_mpfit/' + filename[i][:-4] + '7.png')
        plt.close()
        i += 1
        #break
    except:
        i += 1
	None


import os
from mpfit import mpfit
import numpy as np
from scipy.interpolate import splrep, splev
import ss_readfits
import matplotlib.pyplot as plt
from scipy.integrate import simps
from astropy.stats import median_absolute_deviation
import matplotlib
from matplotlib import rc

matplotlib.rcParams.update({'font.size': 35})
rc('font', **{'family':'serif','serif':['Palatino']})
rc('text', usetex=True)

#c_data, c_tags = ss_readfits.ss_readfits("conv_c2h2.fits")
g_data, g_tags = ss_readfits.ss_readfits("/arrays/igloo1/ssp201701/fits/grams_c.fits")

#print (1)

low = (5.5, 6.5)
up = (8.5, 10)
low = (11.5, 12.5)
up = (16, 20)

ms = 1.98892e30 #kg
G = 6.67e-11 #mks
vexp = 10 * 1000 * 60 * 60 * 24 * 365 # m/yr


#print(2)

def myfunct(p, fjac=None, x=None, y=None, err=None):
	# Parameter values are passed in "p"
	# If FJAC!=None then partial derivatives must be comptuer.
	# FJAC contains an array of len(p), where each entry
	# is 1 if that parameter is free and 0 if it is fixed.
	model = F(x, p)
	# Non-negative status value means MPFIT should continue, negative means
	# stop the calculation.
	status = 0
	return([status, (y-model)/err])

def F(x, p):
    return p[0] * (x**3) + p[1] * (x**2) + p[2] * x + p[3]
#def fun(p, x, y):
    #return model(p, x) - y

for root, dirs, files in os.walk('/arrays/igloo1/ssp201701/CAGB/CE34_mpgood'):
    filenameC = files

eqwC = []
mC = []
mvC = []



for i in range(len(filenameC)):
    #print (3)
    if True:
        #print (filename[i])
        wlen = np.genfromtxt('/asiaa/home/ssp201701/CAGB/CE34/' + filenameC[i], usecols=0)
        flux = np.genfromtxt('/asiaa/home/ssp201701/CAGB/CE34/' + filenameC[i], usecols=1)
        v = np.genfromtxt('/asiaa/home/ssp201701/CAGB/CE34/' + filenameC[i], usecols=2)

	wlen_low = wlen[wlen >= low[0]]
        wlen_low = wlen_low[wlen_low <= low[1]]
        #print wlen_low

	wlen_up = wlen[wlen >= up[0]]
        wlen_up = wlen_up[wlen_up <= up[1]]
        #print wlen_up
	flux_low = flux[wlen >= low[0]]
        flux_low = flux_low[:len(wlen_low)]

	flux_up = flux[wlen >= up[0]]
        flux_up = flux_up[:len(wlen_up)]

	v_low = v[wlen >= low[0]]
        v_low = v_low[:len(wlen_low)]

	v_up = v[wlen >= up[0]]
        v_up = v_up[:len(wlen_up)]

        x = np.concatenate((wlen_low, wlen_up))
        y = np.concatenate((flux_low, flux_up))
        err = np.concatenate((v_low, v_up))

        start = np.where(wlen == wlen_low[-1])
        start = start[0][0]
        stop = np.where(wlen == wlen_up[0])
        stop = stop[0][0]

        p0 = np.ones(4)
        
        #print ('Enter')
        fa = {'x': x, 'y': y, 'err': err}
        
        m = mpfit(myfunct, p0, functkw = fa)
        
        mflux = F(wlen[start:stop + 1], m.params)
        norm_flux = flux[start:stop + 1] / mflux

	eqw = simps(1-norm_flux, wlen[start:stop + 1])
        if eqw >= 0:
            eqwC.append(eqw)
            gram = np.genfromtxt('/arrays/igloo1/ssp201701/CAGB/CE34_2012sorted/' + filenameC[i], usecols = 0, skip_header = 1, max_rows = 30, dtype = int)
        
            tmpm = []
            for j in range(len(gram)):
	        mlr = g_data['MLR'][gram[j]] #Msun/yr
                rin = g_data['Rin'][gram[j]] #Rstar
                #rout = rin * 1000 #Rstar
                mass = g_data['Mass'][gram[j]] * ms #kg
        
                gravity = (10**g_data['logg'][gram[j]])/100 #m/s2
     
                #r = (G * mass / gravity)**0.5 * rout #m
                rsqr = G * mass / gravity * rin * rin #m2

                dust = mlr * ms  * 1000 * 1000/vexp/4/np.pi/(rsqr)**0.5/1e4/6e-15 #g cm-2
                tmpm.append(dust)
            mvC.append(median_absolute_deviation(tmpm) * np.pi/(len(tmpm))**0.5)
            mC.append(tmpm[0])
  
for root, dirs, files in os.walk('/arrays/igloo1/ssp201701/CAGB/ECAGB_mpgood'):
    filenameE = files

eqwE = []
mE = []
mvE = []


i = 0
for i in range(len(filenameE)):
    #print (3)
    if True:
        #print (filenameE[i])
        wlen = np.genfromtxt('/asiaa/home/ssp201701/CAGB/ECAGB/' + filenameE[i], usecols=0)
        flux = np.genfromtxt('/asiaa/home/ssp201701/CAGB/ECAGB/' + filenameE[i], usecols=1)
        v = np.genfromtxt('/asiaa/home/ssp201701/CAGB/ECAGB/' + filenameE[i], usecols=2)

	wlen_low = wlen[wlen >= low[0]]
        wlen_low = wlen_low[wlen_low <= low[1]]
        #print wlen_low

	wlen_up = wlen[wlen >= up[0]]
        wlen_up = wlen_up[wlen_up <= up[1]]
        #print wlen_up
	flux_low = flux[wlen >= low[0]]
        flux_low = flux_low[:len(wlen_low)]

	flux_up = flux[wlen >= up[0]]
        flux_up = flux_up[:len(wlen_up)]

	v_low = v[wlen >= low[0]]
        v_low = v_low[:len(wlen_low)]

	v_up = v[wlen >= up[0]]
        v_up = v_up[:len(wlen_up)]

        x = np.concatenate((wlen_low, wlen_up))
        y = np.concatenate((flux_low, flux_up))
        err = np.concatenate((v_low, v_up))

        start = np.where(wlen == wlen_low[-1])
        start = start[0][0]
        stop = np.where(wlen == wlen_up[0])
        stop = stop[0][0]

        p0 = np.ones(4)
        
        #print ('Enter')
        fa = {'x': x, 'y': y, 'err': err}
        
        m = mpfit(myfunct, p0, functkw = fa)
        
        mflux = F(wlen[start:stop + 1], m.params)
        norm_flux = flux[start:stop + 1] / mflux

	eqw = simps(1-norm_flux, wlen[start:stop + 1])
       
        if True:
            eqwE.append(eqw)
            gram = np.genfromtxt('/arrays/igloo1/ssp201701/CAGB/CE34_2012sorted/' + filenameC[i], usecols = 0, skip_header = 1, max_rows = 30, dtype = int)
        
            tmpm = []
            for j in range(len(gram)):
	        mlr = g_data['MLR'][gram[j]] #Msun/yr
                rin = g_data['Rin'][gram[j]] #Rstar
                #rout = rin * 1000 #Rstar
                mass = g_data['Mass'][gram[j]] * ms #kg
        
                gravity = (10**g_data['logg'][gram[j]])/100 #m/s2
     
                #r = (G * mass / gravity)**0.5 * rout #m
                rsqr = G * mass / gravity * rin * rin #m2

                dust = mlr * ms  * 1000 * 1000/vexp/4/np.pi/(rsqr)**0.5/1e4/6e-15 #g cm-2
                tmpm.append(dust)
            mvE.append(median_absolute_deviation(tmpm) * np.pi/(len(tmpm))**0.5)
            mE.append(tmpm[0])

for root, dirs, files in os.walk('/arrays/igloo1/ssp201701/CAGB/VRO_mpgood'):
    filenameV = files

eqwV = []
mV = []
mvV = []


i = 0
for i in range(len(filenameV)):
    #print (3)
    if True:
        #print (filename[i])
        wlen = np.genfromtxt('/asiaa/home/ssp201701/CAGB/VRO/' + filenameV[i], usecols=0)
        flux = np.genfromtxt('/asiaa/home/ssp201701/CAGB/VRO/' + filenameV[i], usecols=1)
        v = np.genfromtxt('/asiaa/home/ssp201701/CAGB/VRO/' + filenameV[i], usecols=2)

	wlen_low = wlen[wlen >= low[0]]
        wlen_low = wlen_low[wlen_low <= low[1]]
        #print wlen_low

	wlen_up = wlen[wlen >= up[0]]
        wlen_up = wlen_up[wlen_up <= up[1]]
        #print wlen_up
	flux_low = flux[wlen >= low[0]]
        flux_low = flux_low[:len(wlen_low)]

	flux_up = flux[wlen >= up[0]]
        flux_up = flux_up[:len(wlen_up)]

	v_low = v[wlen >= low[0]]
        v_low = v_low[:len(wlen_low)]

	v_up = v[wlen >= up[0]]
        v_up = v_up[:len(wlen_up)]

        x = np.concatenate((wlen_low, wlen_up))
        y = np.concatenate((flux_low, flux_up))
        err = np.concatenate((v_low, v_up))

        start = np.where(wlen == wlen_low[-1])
        start = start[0][0]
        stop = np.where(wlen == wlen_up[0])
        stop = stop[0][0]

        p0 = np.ones(4)
        
        #print ('Enter')
        fa = {'x': x, 'y': y, 'err': err}
        
        m = mpfit(myfunct, p0, functkw = fa)
        
        mflux = F(wlen[start:stop + 1], m.params)
        norm_flux = flux[start:stop + 1] / mflux

	eqw = simps(1-norm_flux, wlen[start:stop + 1])
        eqwV.append(eqw)
        gram = np.genfromtxt('/arrays/igloo1/ssp201701/CAGB/VRO_2012sorted/' + filenameV[i], usecols = 0, skip_header = 1, max_rows = 30, dtype = int)
        tmpm = []
        for j in range(len(gram)):
	    mlr = g_data['MLR'][gram[j]] #Msun/yr
            rin = g_data['Rin'][gram[j]] #Rstar
            #rout = rin * 1000 #Rstar
            mass = g_data['Mass'][gram[j]] * ms #kg
        
            gravity = (10**g_data['logg'][gram[j]])/100 #m/s2
     
            #r = (G * mass / gravity)**0.5 * rout #m
            rsqr = G * mass / gravity * rin * rin #m2

            dust = mlr * ms  * 1000 * 1000/vexp/4/np.pi/(rsqr)**0.5/1e4/6e-15 # cm-2
            tmpm.append(dust)
        mvV.append(median_absolute_deviation(tmpm) * np.pi/(len(tmpm))**0.5)
        mV.append(tmpm[0])

low = (11.5, 12.5)
up = (16, 20)

for root, dirs, files in os.walk('/arrays/igloo1/ssp201701/CAGB/CE34_mpgood'):
    filenameC = files

eqw13C = []
#mC = []
#mvC = []

"""

for i in range(len(filenameC)):
    #print (3)
    if True:
        #print (filename[i])
        wlen = np.genfromtxt('/asiaa/home/ssp201701/CAGB/CE34/' + filenameC[i], usecols=0)
        flux = np.genfromtxt('/asiaa/home/ssp201701/CAGB/CE34/' + filenameC[i], usecols=1)
        v = np.genfromtxt('/asiaa/home/ssp201701/CAGB/CE34/' + filenameC[i], usecols=2)

	wlen_low = wlen[wlen >= low[0]]
        wlen_low = wlen_low[wlen_low <= low[1]]
        #print wlen_low

	wlen_up = wlen[wlen >= up[0]]
        wlen_up = wlen_up[wlen_up <= up[1]]
        #print wlen_up
	flux_low = flux[wlen >= low[0]]
        flux_low = flux_low[:len(wlen_low)]

	flux_up = flux[wlen >= up[0]]
        flux_up = flux_up[:len(wlen_up)]

	v_low = v[wlen >= low[0]]
        v_low = v_low[:len(wlen_low)]

	v_up = v[wlen >= up[0]]
        v_up = v_up[:len(wlen_up)]

        x = np.concatenate((wlen_low, wlen_up))
        y = np.concatenate((flux_low, flux_up))
        err = np.concatenate((v_low, v_up))

        start = np.where(wlen == wlen_low[-1])
        start = start[0][0]
        stop = np.where(wlen == wlen_up[0])
        stop = stop[0][0]

        p0 = np.ones(4)
        
        #print ('Enter')
        fa = {'x': x, 'y': y, 'err': err}
        
        m = mpfit(myfunct, p0, functkw = fa)
        
        mflux = F(wlen[start:stop + 1], m.params)
        norm_flux = flux[start:stop + 1] / mflux

	eqw = simps(1-norm_flux, wlen[start:stop + 1])
        eqw13C.append(eqw)
        

for root, dirs, files in os.walk('/arrays/igloo1/ssp201701/CAGB/ECAGB_mpgood'):
    filenameE = files

eqw13E = []

i = 0
for i in range(len(filenameE)):
    #print (3)
    if True:
        #print (filenameE[i])
        wlen = np.genfromtxt('/asiaa/home/ssp201701/CAGB/ECAGB/' + filenameE[i], usecols=0)
        flux = np.genfromtxt('/asiaa/home/ssp201701/CAGB/ECAGB/' + filenameE[i], usecols=1)
        v = np.genfromtxt('/asiaa/home/ssp201701/CAGB/ECAGB/' + filenameE[i], usecols=2)

	wlen_low = wlen[wlen >= low[0]]
        wlen_low = wlen_low[wlen_low <= low[1]]
        #print wlen_low

	wlen_up = wlen[wlen >= up[0]]
        wlen_up = wlen_up[wlen_up <= up[1]]
        #print wlen_up
	flux_low = flux[wlen >= low[0]]
        flux_low = flux_low[:len(wlen_low)]

	flux_up = flux[wlen >= up[0]]
        flux_up = flux_up[:len(wlen_up)]

	v_low = v[wlen >= low[0]]
        v_low = v_low[:len(wlen_low)]

	v_up = v[wlen >= up[0]]
        v_up = v_up[:len(wlen_up)]

        x = np.concatenate((wlen_low, wlen_up))
        y = np.concatenate((flux_low, flux_up))
        err = np.concatenate((v_low, v_up))

        start = np.where(wlen == wlen_low[-1])
        start = start[0][0]
        stop = np.where(wlen == wlen_up[0])
        stop = stop[0][0]

        p0 = np.ones(4)
        
        #print ('Enter')
        fa = {'x': x, 'y': y, 'err': err}
        
        m = mpfit(myfunct, p0, functkw = fa)
        
        mflux = F(wlen[start:stop + 1], m.params)
        norm_flux = flux[start:stop + 1] / mflux

	eqw = simps(1-norm_flux, wlen[start:stop + 1])
        eqw13E.append(eqw)
        

for root, dirs, files in os.walk('/arrays/igloo1/ssp201701/CAGB/VRO_mpgood'):
    filenameV = files

eqw13V = []


i = 0
for i in range(len(filenameV)):
    #print (3)
    if True:
        #print (filename[i])
        wlen = np.genfromtxt('/asiaa/home/ssp201701/CAGB/VRO/' + filenameV[i], usecols=0)
        flux = np.genfromtxt('/asiaa/home/ssp201701/CAGB/VRO/' + filenameV[i], usecols=1)
        v = np.genfromtxt('/asiaa/home/ssp201701/CAGB/VRO/' + filenameV[i], usecols=2)

	wlen_low = wlen[wlen >= low[0]]
        wlen_low = wlen_low[wlen_low <= low[1]]
        #print wlen_low

	wlen_up = wlen[wlen >= up[0]]
        wlen_up = wlen_up[wlen_up <= up[1]]
        #print wlen_up
	flux_low = flux[wlen >= low[0]]
        flux_low = flux_low[:len(wlen_low)]

	flux_up = flux[wlen >= up[0]]
        flux_up = flux_up[:len(wlen_up)]

	v_low = v[wlen >= low[0]]
        v_low = v_low[:len(wlen_low)]

	v_up = v[wlen >= up[0]]
        v_up = v_up[:len(wlen_up)]

        x = np.concatenate((wlen_low, wlen_up))
        y = np.concatenate((flux_low, flux_up))
        err = np.concatenate((v_low, v_up))

        start = np.where(wlen == wlen_low[-1])
        start = start[0][0]
        stop = np.where(wlen == wlen_up[0])
        stop = stop[0][0]

        p0 = np.ones(4)
        
        #print ('Enter')
        fa = {'x': x, 'y': y, 'err': err}
        
        m = mpfit(myfunct, p0, functkw = fa)
        
        mflux = F(wlen[start:stop + 1], m.params)
        norm_flux = flux[start:stop + 1] / mflux

	eqw = simps(1-norm_flux, wlen[start:stop + 1])
        eqw13V.append(eqw)
"""
plt.figure(figsize = (20, 20))


plt.errorbar(mE, eqwE, None, None, 'bo', ms = 20, lw = 3)
plt.errorbar(mC, eqwC, None, None, 'ro', ms = 20, lw = 3)
plt.errorbar(mV, eqwV, None, None, 'go', ms = 20, lw = 3)

plt.errorbar([np.median(mC), np.median(mE), np.median(mV)], [np.median(eqwC), np.median(eqwE), np.median(eqwV)], [median_absolute_deviation(eqwC)*np.pi/(len(eqwC))**0.5, median_absolute_deviation(eqwE)*np.pi/(len(eqwE))**0.5, median_absolute_deviation(eqwV)*np.pi/(len(eqwV))**0.5], [median_absolute_deviation(mC)*np.pi/(len(mC))**0.5, median_absolute_deviation(mE)*np.pi/(len(mE))**0.5, median_absolute_deviation(mV)*np.pi/(len(mV))**0.5], 'ko', ms = 20, lw = 3, alpha = 0.75)

plt.legend(['CE0-2', 'CE3-4', 'VRO', 'Median'], loc = 'upper left', fontsize = 35)
plt.grid(True)
#plt.xlabel(r'dust column density [cm$^{-2}$]')
plt.ylabel(r'equivalent width at 13.7 $\mu$m [$\mu$m]')
plt.xlabel(r'dust column density [cm$^{-2}$]')
plt.axis = ([None, None, 0, 0.6])
plt.xscale('log')
plt.plot(0, 0)
plt.show()



        

